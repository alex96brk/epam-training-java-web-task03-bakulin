package by.epamtc.bakulin.task03.entity;

public interface PlainArray<E> extends Iterable<E> {

    /**
     * Добавляет элемент в конец массива
     *
     * @param e - добавляемый элемент в массив;
     * @return {@code true} если элемент был добавлен в массив;
     */
    boolean add(E e);

    /**
     * Добавляет элемент в указанный индекс ячейки массива.
     * В случае, если данная ячейка занята - происходит перезапись.
     *
     * @param index integer значение порядкового номера ячейки в массиве;
     * @param e добавляемый элемент в массив;
     * @return E элемент, который ранее находился на данной позиции;
     */
    E set(int index, E e);

    /**
     * Возвращает объект из массива, указанный в качестве параметра.
     *
     * @param o искомый объект;
     * @return E искомый элемент в массиве;
     */
    E get(Object o);

    /**
     * Возвращает объект из массива, по указанному индексу.
     *
     * @param index integer значение порядкового номера ячейки в массиве;
     * @return E искомый элемент в массиве;
     */
    E get(int index);

    /**
     * Возвращает индекс в массиве, указанного объекта в качестве параметра
     * @return {@code -1} если объект отсутствует в массиве;
     */
    int indexOf();

    /**
     * Удаляет объект из массива, указанный в качестве параметра.
     *
     * @param o удаляемый объект;
     * @return {@code true} если объект был успешно удален;
     */
    boolean remove (Object o);

    /**
     * Возвращает текущее количество объектов в массиве
     *
     * @return {@code integer value};
     */
    int size();

    /**
     * Выполняет проверку массива на предмет пустоты.
     *
     * @return {@code true} если текущий массив пустой;
     */
    boolean isEmpty();

    /**
     * Выполняет проверку текущего массива на предмет наличия
     * указанного объекта в качестве параметра.
     *
     * @param o искомый объект;
     * @return {@code true} если указанный объект присутствует в массиве;
     */
    boolean contains(Object o);

}
